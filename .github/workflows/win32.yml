name: Win32
on: [push, pull_request]

jobs:
  version:
    name: version
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.version.outputs.revision }}
      sha: ${{ steps.version.outputs.sha }}
      fullver: ${{ steps.version.outputs.fullver }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - id: version
        run: |
          MAJOR=$(grep -Eo "ENGINE_VERSION_MAJOR [0-9]+" Lorr/Engine/App/Common.hh | grep -Eo "[0-9]+" | tail -1)
          MINOR=$(grep -Eo "ENGINE_VERSION_MINOR [0-9]+" Lorr/Engine/App/Common.hh | grep -Eo "[0-9]+" | tail -1)
          TAG=$(grep -Eo "ENGINE_VERSION_TAG \"([^\"]*)\"" Lorr/Engine/App/Common.hh | grep -Eo "([^\"]*)" | tail -1)
          REVISION=$(git rev-list origin..HEAD --count)
          SHA=$(git rev-parse HEAD)
          SHA7="${GITHUB_SHA::7}"
          FULLVER="v${MAJOR}.${MINOR}.${REVISION}-${TAG}"
          echo "::set-output name=revision::${REVISION}"
          echo "::set-output name=sha::${SHA7}"
          echo "::set-output name=fullver::${FULLVER}"
          echo "::set-output name=tag::${TAG}"

  Build:
    runs-on: windows-latest

    env:
      CMAKE_BUILD_DIR: ${{ github.workspace }}/build/
      CMAKE_INSTALL_DIR: ${{ github.workspace }}/install/
      CC: clang
      CXX: clang++

    steps:
      - uses: actions/checkout@v2        
        with:
          submodules: recursive
      - uses: lukka/get-cmake@latest
      - uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Generate Build Files
        run: cmake -B "${{ env.CMAKE_BUILD_DIR }}" -DCMAKE_INSTALL_PREFIX="${{ env.CMAKE_INSTALL_DIR }}" -DENGINE_VERSION_PATCH=${{ steps.version.outputs.revision }} -DCMAKE_BUILD_TYPE:STRING=Release -DENGINE_VERSION_GITHASH:STRING=${{ steps.version.outputs.sha }} -G Ninja

      - name: Build Release
        run: cmake --build "${{ env.CMAKE_BUILD_DIR }}" --config Release --target all -j 14 --

      - name: Upload Build Binaries
        uses: actions/upload-artifact@v2
        with:
          name: Release
          path: build/bin/Release

  release:
    name: release
    runs-on: ubuntu-latest
    needs: [ version, build ]
    if: github.repository == 'e-erdal/Lorr' && github.event_name == 'push'
    steps:
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.version.outputs.fullver }}
          release_name: ${{ needs.version.outputs.fullver }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}